@page "/payment/{BookingId:int}"
@using Microsoft.AspNetCore.Authorization
@using ParkingSystem.Application.Interfaces
@using ParkingSystem.Domain.Entities
@attribute [Authorize]
@rendermode InteractiveServer
@inject IUnitOfWork UnitOfWork
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Complete Payment</PageTitle>

<h3>Confirm Payment</h3>

@if (booking == null)
{
    <p><em>Loading booking details...</em></p>
}
else if (isPaid)
{
    <div class="alert alert-success">
        <p>Payment successful! Your booking is confirmed.</p>
        <a href="/parking">Return to Dashboard</a>
    </div>
}
else
{
    <div class="card">
        <div class="card-body">
            <h5 class="card-title">Booking Summary</h5>
            <p><strong>Parking Slot:</strong> @booking.ParkingSlot?.SlotNumber</p>
            <p><strong>End Time:</strong> @booking.EndTime.ToLocalTime().ToString("g")</p>
            <h5 class="mt-3"><strong>Amount Due: @amount.ToString("C")</strong></h5>
        </div>
        <div class="card-footer">
            <button class="btn btn-lg btn-success" @onclick="ProcessPayment" disabled="@isProcessing">
                @if(isProcessing) { <span class="spinner-border spinner-border-sm"></span> }
                Pay Now
            </button>
        </div>
    </div>
}

@code {
    [Parameter]
    public int BookingId { get; set; }

    private Bookings? booking;
    private decimal amount = 0; // Example: $5 per hour
    private bool isProcessing = false;
    private bool isPaid = false;

    protected override async Task OnInitializedAsync()
    {
        booking = (await UnitOfWork.Bookings.GetAllIncludingAsync(b => b.ParkingSlot!))
                    .FirstOrDefault(b => b.Id == BookingId);

        if (booking != null)
        {
            var durationHours = (booking.EndTime - booking.StartTime).TotalHours;
            amount = (decimal)durationHours * 5.0m;
        }
    }

    private async Task ProcessPayment()
    {
        if (booking == null) return;

        isProcessing = true;

        var payment = new ParkingSystem.Domain.Entities.Payments
        {
            BookingId = booking.Id,
            Amount = amount,
            PaymentDate = DateTime.UtcNow,
            PaymentMethod = "Credit Card (Simulated)"
        };
        await UnitOfWork.Payments.AddAsync(payment);

        booking.IsPaid = true;
        UnitOfWork.Bookings.Update(booking);

        await UnitOfWork.CompleteAsync();

        isPaid = true;
        isProcessing = false;
    }
}
