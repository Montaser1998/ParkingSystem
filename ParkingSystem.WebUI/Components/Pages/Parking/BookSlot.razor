@page "/book/{SlotId:int}"
@using Microsoft.AspNetCore.Authorization
@using ParkingSystem.Application.Interfaces
@using ParkingSystem.Domain.Entities
@attribute [Authorize]
@rendermode InteractiveServer
@inject IBookingService BookingService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject IUnitOfWork UnitOfWork

<h3>Book Parking Slot</h3>

@if (slot == null)
{
        <p>Loading slot details...</p>
}
else
{
        <h4>Slot: @slot.SlotNumber</h4>
        <div class="form-group">
            <label for="duration">Booking Duration (hours):</label>
            <input type="number" id="duration" class="form-control" @bind="duration" min="1" />
        </div>
        <button class="btn btn-success mt-3" @onclick="HandleBooking" disabled="@isProcessing">
            @if (isProcessing)
            {
                <span class="spinner-border spinner-border-sm"></span>
            }
            Confirm Booking for @(cost.ToString("C"))
        </button>

    @if (!string.IsNullOrEmpty(statusMessage))
    {
                <div class="alert @(isError ? "alert-danger" : "alert-info") mt-3">@statusMessage</div>
    }
}

@code {
    [Parameter]
    public int SlotId { get; set; }

    private ParkingSlots? slot;
    private Guid currentUserId;
    private int duration = 1;
    private decimal cost => duration * 5.0m;
    private string? statusMessage;
    private bool isError = false;
    private bool isProcessing = false;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity is { IsAuthenticated: true })
        {
            currentUserId = Guid.Parse(user.FindFirst(c => c.Type.Contains("nameidentifier"))!.Value);
            slot = await UnitOfWork.ParkingSlots.GetByIdAsync(SlotId);
        }
    }

    private async Task HandleBooking()
    {
        if (duration <= 0) return;

        isProcessing = true;
        isError = false;
        statusMessage = null;

        try
        {
            var bookingToPay = await BookingService.CreateOrExtendBookingAsync(SlotId, currentUserId, duration);

            // Redirect to the payment page with the new/updated booking ID
            NavigationManager.NavigateTo($"/payment/{bookingToPay.Id}");
        }
        catch (InvalidOperationException ex)
        {
            // The service threw an error (e.g., slot taken), so display it to the user.
            isError = true;
            statusMessage = ex.Message;
        }
        finally
        {
            isProcessing = false;
        }
    }
}
